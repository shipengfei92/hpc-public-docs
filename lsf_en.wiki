This document will instruct you to submit and manage jobs via LSF, it contains the information about using LSF to submit, check and delete jobs.

Following the document’s operation and feedback’s methods will help you complete the job successfully. It will be very kind to provide advices, thank you!

= Check the Cluster’s Running Status via LSF =

== Check the LSF Computing Nodes List <code>bhosts</code> ==

<pre># bhosts
HOST_NAME          STATUS       JL/U    MAX  NJOBS    RUN  SSUSP  USUSP    RSV
fat01              ok              -     16      0      0      0      0      0
fat02              ok              -     16      0      0      0      0      0
fat03              ok              -     16      0      0      0      0      0
fat04              ok              -     16      0      0      0      0      0
fat05              ok              -     16      0      0      0      0      0
fat06              ok              -     16      0      0      0      0      0
fat07              ok              -     16      0      0      0      0      0
fat08              ok              -     16      0      0      0      0      0
fat09              ok              -     16      0      0      0      0      0
fat10              ok              -     16      0      0      0      0      0
......</pre>
== Check the LSF Queues <code>bqueues</code> ==

Check the whole queues’ overall information:

<pre># bqueues
QUEUE_NAME      PRIO STATUS          MAX JL/U JL/P JL/H NJOBS  PEND   RUN  SUSP
cpu              40  Open:Active       -    -    -    -  2072     0  2072     0
fat              40  Open:Active       -    -    -    -     0     0     0     0
gpu              40  Open:Active       -    -    -    -   288     0   288     0
mic              40  Open:Active       -    -    -    -     0     0     0     0
cpu-fat          40  Open:Active       -    -    -    -    16     0    16     0</pre>
Check for some queue’s information:

<pre># bqueues fat
QUEUE_NAME      PRIO STATUS          MAX JL/U JL/P JL/H NJOBS  PEND   RUN  SUSP
fat              40  Open:Active       -    -    -    -     0     0     0     0</pre>
== Check the load of computing nodes <code>lsload</code> ==

Check the overall load:

<pre># lsload
HOST_NAME       status  r15s   r1m  r15m   ut    pg  ls    it   tmp   swp   mem
node011             ok   0.0   0.3   0.4   0%   0.0   0 49024  193G   62G   61G
node039             ok   0.0   0.6   0.5   0%   0.0   0 49024  194G   62G   61G
node041             ok   0.0   0.0   0.0   0%   0.0   0 49024  194G   62G   61G
node050             ok   0.0   0.3   0.4   0%   0.0   0 49024  194G   62G   60G
node064             ok   0.0   0.7   0.6   0%   0.0   0 49024  194G   62G   61G
node077             ok   0.0   0.7   0.5   0%   0.0   0 49024  193G   62G   61G
......</pre>
Check for some node’s load:

<pre># lsload node001
HOST_NAME       status  r15s   r1m  r15m   ut    pg  ls    it   tmp   swp   mem
node01              ok   0.3   0.1   0.1   1%   0.0   0   332  152G   62G   61G</pre>
= Submit the Jobs via LSF <code>bsub</code> =

== Submit Jobs Manualy ==

LSF uses <code>bsub</code> to submit jobs. The format of <code>bsub</code> is:

<pre>bsub -n Z -q QUEUENAME -i INPUTFILE -o OUTPUTFILE COMMAND</pre>
<code>Z</code> is the number of threads needed, <code>-q</code> assign the queue. If there is no option <code>-q</code>, the system will submit the jobs to the default queue. <code>INPUTFILE</code> is name of the file read by the program, <code>OUTPUTFILE</code> is the output file’s name.

For the serial job, <code>COMMAND</code> can directly be your program’s name. Example: submit the serial program <code>mytest</code> via LSF:

<pre>bsub -n 1 -q q_default -o mytest.out ./mytest</pre>
For the MPI parallel program, the format of <code>COMMAND</code> is <code>-a mpich_gm mpirun.lsf PROG_NAME</code>. Example: submit the parallel program <code>mytest</code> via LSF which uses 16 threads:

<pre>bsub -n 16 -q q_default -o mytest.out -a mpich_gm mpirun.lsf ./mytest</pre>
== Interactive Batch Submit ==

You can start up an interactive shell environment by using <code>bsub</code> to submit multiple parallel jobs whose running arguments are the same:

<pre># bsub
bsub&gt; -n 16
bsub&gt; -q q_default
bsub&gt; -o output.txt
bsub&gt; COMMAND1
bsub&gt; COMMAND2
bsub&gt; COMMAND3</pre>
It is equal to:

<pre>bsub -n 16 -q q_default -o output.txt COMMAND1
bsub -n 16 -q q_default -o output.txt COMMAND2
bsub -n 16 -q q_default -o output.txt COMMAND3</pre>
== Write a LSF scripts to submit jobs ==

<pre>#BSUB -n 16
#BSUB -q q_default
#BSUB -o output.txt
-a mpich_gm mpirun.lsf ./mytest</pre>
<code>bsub</code> also accepts the state of jobs from stdin, that means we can write the LSF script to submit jobs. <code>bsub</code>’s script is easy to write, the code above is an example named <code>bsub.script</code>, submit <code>bsub.script</code> to LSF via input redirection:

<pre>bsub &lt; bsub.script</pre>
It is equal to:

<pre>bsub -n 16 -q q_default -o output.txt -a mpich_gm mpirun.lsf ./mytest</pre>
== A more complicated LSF script ==

<pre>#BSUB -J HELLO_MPI
#BSUB -o job.out
#BSUB -e job.err
#BSUB -n 256

source /lustre/utility/intel/composer_xe_2014.3.163/bin/compilervars.sh intel64
source /lustre/utility/intel/mkl/bin/intel64/mklvars_intel64.sh
source /lustre/utility/intel/impi/4.1.1.036/bin64/mpivars.sh

MPIRUN=`which mpirun`
EXE=&quot;./mpihello&quot;

CURDIR=$PWD
cd $CURDIR
rm -f nodelist nodes &gt;&amp; /dev/null
touch nodelist
touch nodes
NP=0

for host in `echo $LSB_MCPU_HOSTS |sed -e 's/ /:/g'|  sed 's/:n/\nn/g'`
do
echo $host &gt;&gt; nodelist
echo $host | cut -d &quot;:&quot; -f1 &gt;&gt; nodes
nn=`echo $host | cut -d &quot;:&quot; -f2`
NP=`echo $NP+$nn | bc`
done</pre>
= Other Job Manage Operations =

== Check the jobs’ status <code>bjobs</code> ==

Check the submitted jobs’ running status:

<pre>bjobs</pre>
Display the jobs’ running status as wide format:

<pre>bjobs -w</pre>
Display all the jobs:

<pre>bjobs -a</pre>
Display the running jobs:

<pre>bjobs -r</pre>
Display the pending jobs and reasons:

<pre>bjobs -p</pre>
Display the suspending jobs and reasons:

<pre>bjobs -s</pre>
Display detailed information of job <code>JOBID</code>:

<pre>bjobs -l JOBID</pre>
== Kill the Jobs <code>bkill</code> ==

Kill the jobs unwanted:

<pre>bkill</pre>
Kill the job <code>JOBID</code>:

<pre>bkill JOBID</pre>
Remove the job <code>JOBID</code> from LSF instead of waiting its progresses killed by the operating system:

<pre>bikill JOBID</pre>
== Monitor the Output of Jobs <code>bpeek</code> ==

Display the stdout and stderr output of a unfinished batch job

<pre>bpeek</pre>
Display the output of the job with the specified ID <code>JOBID</code>

<pre>bpeek JOBID</pre>
== Jobs’ History Information <code>bhist</code> ==

display the history of batch jobs

<pre>bhist</pre>
Display the specified job(s) <code>JOBID</code> only

<pre>bhist JOBID</pre>
